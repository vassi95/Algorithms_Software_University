import java.util.Scanner;

public class Generate_Permutations {
	public static void permute(int[] arr , int index) {

	    int n = arr.length;
	    int[] p = new int[n];  
	    int i = 1; //Upper bound index. i.e: if string is "abc" then index i could be at "c"
	    while (i < n) {
	        if (p[i] < i) { //if the weight index is bigger or the same it means that we have already switched between these i,j (one iteration before).
	            int j = ((i % 2) == 0) ? 0 : p[i];//Lower bound index. i.e: if string is "abc" then j index will always be 0.
	            swap(arr, i, j);
	            // Print current
	            System.out.println(join(arr));
	            p[i]++; //Adding 1 to the specific weight that relates to the char array.
	            i = 1; //if i was 2 (for example), after the swap we now need to swap for i=1
	        }
	        else { 
	            p[i] = 0;//Weight index will be zero because one iteration before, it was 1 (for example) to indicate that char array a[i] swapped.
	            i++;//i index will have the option to go forward in the char array for "longer swaps"
	        }
	    }
	}

	private static String join(int[] a) {
	    StringBuilder builder = new StringBuilder();
	    builder.append(a);
	    return builder.toString();
	}

	private static void swap(int[] a, int i, int j) {
	    int temp = a[i];
	    a[i] = a[j];
	    a[j] = temp;
	}
	
	public static void main(String args[]) {
		Scanner in = new Scanner(System.in);
		System.out.println("n= ");
		int arr = in.nextInt();
		int[] input = new int[arr];
		for (int i = 0; i < arr; i++) {
			input[i] = i+1;
		}

		permute(input, 0);

	}
}
