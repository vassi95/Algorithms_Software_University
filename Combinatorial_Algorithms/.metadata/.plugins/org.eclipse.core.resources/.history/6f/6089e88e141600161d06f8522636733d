import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class Generate_Permutations {
	
	/* public static void main(String args[])
	    {
		 Scanner in = new Scanner(System.in);
			System.out.println("n= ");
			int n = in.nextInt();
	 
	        int key = n-1;
	        int[] currentPermutation = new int[n];
	        for (int i = 0; i < n; i++)
	        {
	            currentPermutation[i] = i+1;
	        }
	        myPrint(currentPermutation);
	        while (true)
	        {
	            key = FindKey(currentPermutation);
	            if (key >= 0)
	            {
	                SwapKey(currentPermutation, key);
	           //sort(currentPermutation, key + 1, n - key - 1);
	                myPrint(currentPermutation);
	            }
	            else break;
	        }
	    }
	    //----------
	    private static void myPrint(int[] currentPerm)
	    {
	        for (int i = 0; i < currentPerm.length; i++)
	        {
	            System.out.print((currentPerm[i] + " "));
	        }
	        System.out.println();
	    }
	    //----------
	    private static void SwapKey(int[]arr, int key)
	    {
	        int tempNum;
	        for (int i = arr.length-1; i>=key ; i--)
	        {
	            if (arr[i] > arr[key])//find first value from right to left, greater than key
	            {
	                tempNum = arr[key];
	                arr[key] = arr[i];
	                arr[i] = tempNum;
	                return;
	            }
	        }
	    }
	    //----------
	    private static int FindKey(int[] currentPerm)
	    {
	        for (int i = currentPerm.length-2; i >=0 ; i--)
	        {
	            if (currentPerm[i]<currentPerm[i+1]) return i;
	        }
	        return -1;
	    }*/
	

	
	private static void PrintPermutations(int[] s, int n, int k)
	{
	// print all permutations of k members of s
	// we assume that s is in ascending order
	// and that 1 < k <= n
	int temp;
	// get and print first permutation
	int[] p = new int[k];
	for (int i = 0; i < k; i++)
	{
	  p[i] = s[i];
	}
	Print1(p);
	// loop thru permutations until finished
	boolean done = false;
	while (!done)
	{
	  // look for first increase in p
	  int i = 0;
	  while (i < k - 1 && p[i] > p[i + 1])
	    {i++;}
	  if (i == 0)
	  {
	    // just swap the first two
	    temp = p[0];
	    p[0] = p[1];
	    p[1] = temp;
	    Print1(p);
	  }
	  else
	  {
	    // put back in ascending order
	    for (int j = 0; j < (i + 1) / 2; j++)
	    {
	      temp = p[j];
	      p[j] = p[i - j];
	      p[i - j] = temp;
	    }
	    if (i >= k - 1)
	    {
	      // we are done with this subset
	      done = NextSubset(s,p, n,k);
	      if (!done) Print1(p);
	    }
	    else
	    {
	      // find next smaller element to p[i+1]
	      // and swap with it
	      int m = i;
	      while (m >= 0 && p[m] > p[i + 1])
	        {m--;}
	      temp = p[m];
	      p[m] = p[i + 1];
	      p[i + 1] = temp;
	      Print1(p);
	    }
	  }
	}
	}
	private static boolean NextSubset(int[] s, int[] p, int n, int k)
	{
	// we assume both s and p are in ascending order
	// and that 1 < k <= n
	// return true if there are no more subsets to get
	// 
	// find initial missing elements
	int i = 0;
	while (s[i] < p[0]) { i++; }
	if (i >= n - k)
	{
	  // we are done
	  return true;
	}
	// find next missing element
	int j = 1;
	while (j < k && s[i+j] == p[j]) { j++;}
	p[j - 1] = s[i+j];
	if (i > 0)
	{
	  for (int m = 0; m < j - 1; m++)
	  {
	    p[m] = s[m];
	  }
	}
	return false;
	}



private static void Print1(int[] currentPerm)
{
    for (int i = 0; i < currentPerm.length; i++)
    {
        System.out.print((currentPerm[i] + " "));
    }
    System.out.println();
}
public static void main(String args[])
{
Scanner in = new Scanner(System.in);
System.out.println("n= ");
int n = in.nextInt();
int[] arr = new int[n];
for (int i = 0; i < n; i++)
{
    arr[i] = i+1;
}
PrintPermutations(arr,0, arr.length);
}
}
