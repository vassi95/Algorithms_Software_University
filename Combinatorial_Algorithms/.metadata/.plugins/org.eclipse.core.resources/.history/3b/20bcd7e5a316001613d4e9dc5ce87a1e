import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class Permutations {

	public static void main(String args[])
	{
		int[] arr = new int[] { 3, 5, 1, 5, 5 };
		Arrays.sort(arr);
		permute(arr, 0, arr.length);
	}

	
	public static void permute(int[] ps, int start, int n) {
	    Print(ps);
	    int tmp = 0;

	    if (start < n) {
	      for (int i = n - 2; i >= start; i--) {
	        for (int j = i + 1; j < n; j++) {
	          if (ps[i] != ps[j]) {
	            // swap ps[i] <--> ps[j]
	            tmp = ps[i];
	            ps[i] = ps[j];
	            ps[j] = tmp;

	            permute(ps, i + 1, n);
	          }
	        }

	        // Undo all modifications done by
	        // recursive calls and swapping
	        tmp = ps[i];
	        for (int k = i; k < n - 1;)
	          ps[k] = ps[++k];
	        ps[n - 1] = tmp;
	      }
	    }
	  }
	/*static void PermuteRep(int[] arr, int k)
	{
	  if (k >= arr.length)
	    Print(arr);
	  else
	  {
	    //PermuteRep(arr, k + 1);
	    Set<Integer> swapped = new HashSet<Integer>();
	    for (int i = k ; i < arr.length; i++)
	    {
	    	if(!swapped.contains(arr[i])){
	    		 Swap(arr[k], arr[i]);
	   	      PermuteRep(arr, k + 1);
	   	      Swap(arr[k], arr[i]);
	   	      swapped.add(arr[i]);
	    	}
	     
	    }
	  }
	}
*/
	static void Print(int[] arr)
	{
		for (int i = 0; i < arr.length; i++) {
			System.out.print((arr[i] + " "));
		}
		System.out.println();
	}

	static void Swap(int first, int second)
	{
		int oldFirst = first;
		first = second;
		second = oldFirst;
	}
}
